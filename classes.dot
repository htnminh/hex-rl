digraph "classes" {
rankdir=BT
charset="utf-8"
"hex_rl.pyg_button.Button" [color="black", fontcolor="black", label=<{Button|colour : Tuple[int, int, int]<br ALIGN="LEFT"/>font : Font<br ALIGN="LEFT"/>font_size : int<br ALIGN="LEFT"/>highlight_colour<br ALIGN="LEFT"/>highlight_offset : int<br ALIGN="LEFT"/>highlight_tick : int<br ALIGN="LEFT"/>max_highlight_ticks : int<br ALIGN="LEFT"/>text : str<br ALIGN="LEFT"/>text_colour : Tuple[int, int, int]<br ALIGN="LEFT"/>text_rect<br ALIGN="LEFT"/>text_render<br ALIGN="LEFT"/>x : float<br ALIGN="LEFT"/>y : float<br ALIGN="LEFT"/>|is_collide(mouse_pos)<br ALIGN="LEFT"/>render(screen)<br ALIGN="LEFT"/>render_highlight(): None<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.model_dqn.CustomCNN" [color="black", fontcolor="black", label=<{CustomCNN|cnn : Sequential<br ALIGN="LEFT"/>|forward(observations)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.model_dqn.DQNModel" [color="black", fontcolor="black", label=<{DQNModel|env<br ALIGN="LEFT"/>model : DQN<br ALIGN="LEFT"/>|load(path): None<br ALIGN="LEFT"/>predict(board)<br ALIGN="LEFT"/>predict_action(obs)<br ALIGN="LEFT"/>predict_inverse(board)<br ALIGN="LEFT"/>predict_q(obs)<br ALIGN="LEFT"/>save(path): None<br ALIGN="LEFT"/>train(total_timesteps): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.hex.Hex" [color="black", fontcolor="black", label=<{Hex|LOWER_SIZE_LIMIT : int<br ALIGN="LEFT"/>UPPER_SIZE_LIMIT : int<br ALIGN="LEFT"/>board : ndarray<br ALIGN="LEFT"/>inversed : bool<br ALIGN="LEFT"/>player : int<br ALIGN="LEFT"/>rich_exceptions : bool<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>winner : NoneType, int<br ALIGN="LEFT"/>|check_winner(): Optional[int]<br ALIGN="LEFT"/>get_char_player(): str<br ALIGN="LEFT"/>get_char_winner(): str<br ALIGN="LEFT"/>get_color_player(): str<br ALIGN="LEFT"/>get_color_winner(): str<br ALIGN="LEFT"/>get_rich_char_player(): str<br ALIGN="LEFT"/>get_rich_char_winner(): str<br ALIGN="LEFT"/>get_rich_color_player(): str<br ALIGN="LEFT"/>get_rich_color_winner(): str<br ALIGN="LEFT"/>get_rich_str(): str<br ALIGN="LEFT"/>get_winner_group(): Optional[set[tuple[int, int]]]<br ALIGN="LEFT"/>init_board(): np.ndarray<br ALIGN="LEFT"/>inverse(): None<br ALIGN="LEFT"/>is_valid_action(tup_action: tuple[int, int]): bool<br ALIGN="LEFT"/>play(tup_action: tuple[int, int]): None<br ALIGN="LEFT"/>player_int_to_char(player: int): str<br ALIGN="LEFT"/>player_int_to_color(player: int): str<br ALIGN="LEFT"/>player_int_to_rich_char(player: int): str<br ALIGN="LEFT"/>player_int_to_rich_color(player: int): str<br ALIGN="LEFT"/>reset(): None<br ALIGN="LEFT"/>rich_print(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.hex_cli_api.HexCLI" [color="black", fontcolor="black", label=<{HexCLI|<br ALIGN="LEFT"/>|play_pvp_cli(debug): int<br ALIGN="LEFT"/>print_prompt_and_play(): Tuple[int, int]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.model_dqn.HexEnv" [color="black", fontcolor="black", label=<{HexEnv|action_space : Discrete<br ALIGN="LEFT"/>dqn_model : Optional[DQNModel]<br ALIGN="LEFT"/>hex<br ALIGN="LEFT"/>observation_space : Box<br ALIGN="LEFT"/>|render(mode)<br ALIGN="LEFT"/>reset(seed)<br ALIGN="LEFT"/>step(action, inverse)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.pyg_hexagrid.HexagonGrid" [color="black", fontcolor="black", label=<{HexagonGrid|agent_1 : Optional[str]<br ALIGN="LEFT"/>agent_2 : Optional[str]<br ALIGN="LEFT"/>caption : str<br ALIGN="LEFT"/>color_edge_width : int<br ALIGN="LEFT"/>colour : tuple<br ALIGN="LEFT"/>init_position : tuple<br ALIGN="LEFT"/>mode : Optional[str]<br ALIGN="LEFT"/>radius : int<br ALIGN="LEFT"/>screen_fill_colour : tuple<br ALIGN="LEFT"/>screen_size : tuple<br ALIGN="LEFT"/>size : Optional[int]<br ALIGN="LEFT"/>|init_buttons(text): List[Button]<br ALIGN="LEFT"/>init_hexagons(): List[List[HexagonTile]]<br ALIGN="LEFT"/>init_info_text(text)<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>render_buttons(screen, buttons)<br ALIGN="LEFT"/>render_hexagrid(screen, hexagons, winner_group)<br ALIGN="LEFT"/>render_info_text(screen, info_text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.pyg_hexagon.HexagonTile" [color="black", fontcolor="black", label=<{HexagonTile|centre<br ALIGN="LEFT"/>colour : Tuple[int, ...]<br ALIGN="LEFT"/>highlight_colour<br ALIGN="LEFT"/>highlight_offset : int<br ALIGN="LEFT"/>highlight_tick : int<br ALIGN="LEFT"/>max_highlight_ticks : int<br ALIGN="LEFT"/>minimal_radius<br ALIGN="LEFT"/>player : NoneType<br ALIGN="LEFT"/>position : Tuple[float, float]<br ALIGN="LEFT"/>radius : float<br ALIGN="LEFT"/>vertices : list<br ALIGN="LEFT"/>|collide_with_point(point: Tuple[float, float]): bool<br ALIGN="LEFT"/>compute_neighbours(hexagons: List[HexagonTile]): List[HexagonTile]<br ALIGN="LEFT"/>compute_vertices(): List[Tuple[float, float]]<br ALIGN="LEFT"/>is_neighbour(hexagon: HexagonTile): bool<br ALIGN="LEFT"/>mark_winner_group(screen): None<br ALIGN="LEFT"/>play(player): None<br ALIGN="LEFT"/>render(screen): None<br ALIGN="LEFT"/>render_highlight(): None<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.hex.InvalidActionError" [color="black", fontcolor="red", label=<{InvalidActionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"hex_rl.hex.InvalidSizeError" [color="black", fontcolor="red", label=<{InvalidSizeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"hex_rl.model_random.RandomModel" [color="black", fontcolor="black", label=<{RandomModel|<br ALIGN="LEFT"/>|predict(board, info: dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.hex.TerminatedError" [color="black", fontcolor="red", label=<{TerminatedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"hex_rl.pyg_button.TextButton" [color="black", fontcolor="black", label=<{TextButton|highlight_colour<br ALIGN="LEFT"/>text : str<br ALIGN="LEFT"/>|update_text(new_text: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"hex_rl.pyg_button.TextButton" -> "hex_rl.pyg_button.Button" [arrowhead="empty", arrowtail="none"];
"hex_rl.model_dqn.HexEnv" -> "hex_rl.model_dqn.DQNModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="env", style="solid"];
}
